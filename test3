#!/usr/bin/env python3

import argparse
import hashlib
import sys
import random
import mmap
import os
import subprocess
import pathlib

import md

# Verify 10 MB of data
VERIFICATION_SZ = 10 << 20

# Raid superblock v1.2 consumes (256 + 2 * ndisks) bytes at a 4k offset in each
# array device, 8k allows for arrays with up to 1920 disks which should be well
# outside testing bounds. All other raid superblocks live and the end of each
# disk and will not overlap with the data/zeroing range
MAX_SUPERBLOCK_SZ = 8 << 10

class TestRunner:
    def zero_all_disks(self):
        if 'ram' in next(self._md.get_disks()):
            subprocess.check_call(["modprobe", "brd"])

        for dev in self._md.devs:
            count = VERIFICATION_SZ + MAX_SUPERBLOCK_SZ
            count = (count + (1 << 20) - 1) >> 20 # ALIGN_CEIL the size
            subprocess.check_call(["dd", "if=/dev/zero", f"of={dev}",
                                   "bs=1M", f"count={count}", "oflag=direct"],
                                  stderr=subprocess.DEVNULL)

    def __init__(self, verify=False):
        self._md = md.MDInstance.create_from_args(["--assume-clean"])

        self.verify_fd = None
        if verify:
            self.verify_disk = self._md.get_special_disk()
            self.zero_all_disks()
            self.verify_fd = os.open(self.verify_disk, os.O_RDWR|os.O_DIRECT)

        self._md.setup()

        self.kmsg = open("/dev/kmsg", "w")

        self.fd = self._md.open_direct()
        self.f = os.fdopen(self.fd, "rb+", 0)

    def write_test(self, offset_sector, bb, sz=1 << 20):
        offset = offset_sector << 9
        self.kmsg.write(f"TEST {offset:#x} {offset_sector} {sz >> 9} {repr(bb)}\n")
        self.kmsg.flush()

        os.lseek(self.fd, offset, os.SEEK_SET)
        m1 = mmap.mmap(-1, sz)
        m1.write(bb * sz)
        os.write(self.fd, m1)

        if self.verify_fd:
            os.lseek(self.verify_fd, offset, os.SEEK_SET)
            os.write(self.verify_fd, m1)

        m2 = mmap.mmap(-1, sz)
        os.lseek(self.fd, offset, os.SEEK_SET)
        self.f.readinto(m2)

        m1.seek(0)
        m2.seek(0)
        a = m1.read()
        b = m2.read()
        print(f"Wrote {len(a)} {repr(bb)}s and read back {len(b)} at {offset:#x} {offset_sector}")
        if a == b:
            return

        coupled_idx = enumerate(zip(a, b))
        res = next(idx for idx, (x, y) in coupled_idx if x != y)

        pathlib.Path("failed.dat").write_bytes(b)
        sys.exit(f"FAILED Readback at sector {offset + res:#x}")

    def basic_tests(self):
        self.write_test(0, b"X")
        self.write_test(1544, b"Y")
        self.write_test(1552, b"Z")
        self.write_test(1560, b"A")
        self.write_test(1736, b"B")
        self.write_test(1688, b"B")
        self.write_test(1848, b"C")
        self.write_test(1520, b"D")
        self.write_test(8293, b"E", 0xFF800)
        print()

    def run_random(self, cnt, st=0):
        for i in range(1, cnt+1):
            sector = random.randrange(0, 10000)
            sz = random.randrange(512, 1 << 20, 512)
            self.write_test(sector, bytes([(st + i) & 0xFF]), sz)
        print()

    def verify(self):
        try:
            print("Verifying")
            subprocess.check_call(["cmp", "-b", "-n", str(VERIFICATION_SZ),
                                   self._md.md_dev, self.verify_disk])
        except subprocess.SubprocessError:
            sys.exit(1)

    def log(self, msg):
        print(msg)
        self.kmsg.write(msg)
        self.kmsg.flush()

    def grow(self):
        cnt = self._md.grow()
        self.log(f"Array grew to {cnt} devices")

    def grow_tests(self, cnt, quick=False):
        self.grow()
        self.run_random(cnt, 0x30)

        if quick:
            return

        self.grow()
        self.run_random(cnt)

        if self._md.get_level() != "raid6":
            self.grow()
            self.run_random(cnt)

    def degrade_test(self, cnt, quick=False):
        for d in self._md.get_disks():
            self._md.degrade(d)
            self.log(f"Marked {d} failed")
            self.run_random(cnt // 2)
            self._md.recover(d)
            self.log(f"Restored {d}")
            self.run_random(cnt // 2)
            if quick:
                return

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    group = parser.add_mutually_exclusive_group()
    group.add_argument("-g", "--grow-test", action="store_true")
    group.add_argument("-d", "--degrade-test", action="store_true")
    parser.add_argument("-q", "--quick", action="store_true")
    parser.add_argument("-V", "--verify", action="store_true",
                        help="verify the disk matches expected when done; " +
                        "NOTE: the upstream kernel has bugs here and it "+
                        "fails randomly")
    args = parser.parse_args()

    try:
        runner = TestRunner(args.verify)
        runner.basic_tests()

        cnt = 400
        if args.quick:
            cnt = 6

        runner.run_random(cnt)

        if args.grow_test:
            runner.grow_tests(cnt, args.quick)
        elif args.degrade_test:
            runner.degrade_test(cnt, args.quick)

        if args.verify:
            runner.verify()
    except KeyboardInterrupt:
        sys.exit("")
