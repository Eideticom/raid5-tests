#!/usr/bin/env python3

import argparse
import os
import subprocess
import sys

def run_test(test, env=None):
    print(f"  {' '.join(test)}")
    try:
        if env is not None:
            env = {**os.environ, **env}
        subprocess.check_call(test, stdout=subprocess.DEVNULL,
                              env=env)
    except subprocess.SubprocessError as e:
        sys.exit(f"FAILED: {e}")

def run_all_tests(env):
    run_test(["./test1"], env)
    run_test(["./test2"], env)
    run_test(["./test3", "--verify"], env)
    run_test(["./test3_all"], env)
    run_test(["./test3", "-d"], env)
    if not env or env.get("NO_RESHAPE") != "y":
        run_test(["./test3", "-g"], env)
    run_test(["fio", "test1.fio"], env)
    run_test(["fio", "test2.fio"], env)
    run_test(["fio", "test_4jobs.fio"], env)


TEST_ENVS = {
    "default":       None,
    "loop":          {"DISK_TYPE": "loopback",
                      "SIZE":       "64M"},
    "no_thread":     {"THREAD_CNT": "0"},
    "bitmap":        {"POLICY":     "bitmap"},
    "ppl":           {"POLICY":     "ppl",
                      "NO_RESHAPE": "y"},
    "journal":       {"POLICY":     "journal",
                      "NO_RESHAPE": "y"},
    "raid6":         {"DISKS":      "4",
                      "LEVEL":      "6"},
    "raid6_bitmap":  {"DISKS":      "4",
                      "LEVEL":      "6",
                      "POLICY":     "bitmap"},
    "raid4":         {"LEVEL":      "4"},
}

if "DEVS" in os.environ and os.environ["DEVS"].strip() != "":
    del TEST_ENVS["loop"]

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("tests", nargs="*", help="tests to run",
                        choices=list(TEST_ENVS.keys()) + [[]])
    args = parser.parse_args()

    os.environ["ZERO_FIRST"] = "y"
    os.environ["QUIET"] = "y"

    if not args.tests:
        args.tests = TEST_ENVS.keys()

    try:
        for test in args.tests:
            print(f"Running {test}:")
            run_all_tests(TEST_ENVS[test])
    except KeyboardInterrupt:
        print()
