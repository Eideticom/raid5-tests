#!/bin/bash

umount /dev/md0 2>/dev/null

set -e

ASSUME_CLEAN=n ./setup
SRC_DIR=$(realpath "$(dirname "${BASH_SOURCE[0]}")")
DATA_DIR="$SRC_DIR/data"

if [ ! -d "$DATA_DIR" ]; then
	mkdir -p "$DATA_DIR"
	chmod a+rwx "$DATA_DIR"
fi

BIG_FILE="$DATA_DIR/bigfile"
if [ ! -f "$BIG_FILE" ]; then
	head -c 1M /dev/urandom > "$BIG_FILE"
	chmod a+rw "$BIG_FILE"
fi

SMALL_FILE1="$DATA_DIR/sm1"
if [ ! -f "$SMALL_FILE1" ]; then
	head -c 4k /dev/urandom > "$SMALL_FILE1"
	chmod a+rw "$SMALL_FILE1"
fi

SMALL_FILE2="$DATA_DIR/sm2"
if [ ! -f "$SMALL_FILE2" ]; then
	head -c 5432 /dev/urandom > "$SMALL_FILE2"
	chmod a+rw "$SMALL_FILE2"
fi

TEST_FILES=("$BIG_FILE" "$SMALL_FILE1" "$SMALL_FILE2")

mkfs.xfs -f /dev/md0

function check_file() {
	ORIG=$1
	NEW=${2:-$(basename $ORIG)}
	md5sum "$NEW"
	cmp "$ORIG" "$NEW"
}

function check_all() {
	for t in "${TEST_FILES[@]}"; do
		check_file "$t"
	done
}

function drop_cache() {
	echo DROP CACHE
	sync
	drop_caches
}

function remount() {
	echo REMOUNT
	popd > /dev/null
	umount /dev/md0
	xfs_repair -e /dev/md0 2> /dev/null
	mount /dev/md0 mnt
	pushd mnt > /dev/null
}

function atexit() {
	dyndbg file raid5.c -p
	popd > /dev/null
	umount /dev/md0
}

mount /dev/md0 mnt
pushd mnt > /dev/null
trap atexit EXIT

cp "${TEST_FILES[@]}" .
sync
check_all
drop_cache
check_all
remount

drop_cache
remount

#dyndbg func make_stripe_request +p
#dyndbg func __add_stripe_bio +p

SEQ_CNT=10
function check_seq()
{
	for i in $(seq "$SEQ_CNT"); do
		check_file "$BIG_FILE" "$i"
	done
}

for i in $(seq "$SEQ_CNT"); do
	cp "$BIG_FILE" "$i"
done

drop_cache
check_seq
remount
check_seq
