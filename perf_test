#!/usr/bin/env python3

from fio import FIO
import md

import argparse
import itertools
import json
import os
import subprocess as sp
import tabulate
import sys

def suffix(val, suffixes, base=1024):
    idx = 0
    while val > base:
        idx += 1
        val /= base
    if val > 10:
        return f"{val:.1f} {suffixes[idx]}"
    else:
        return f"{val:.2f} {suffixes[idx]}"

def bw_suffix(val):
    suffixes = ["KiB/s", "MiB/s", "GiB/s"]
    return suffix(val, suffixes)

def iops_suffix(val):
    suffixes = ["", "K", "M", "G"]
    return suffix(val, suffixes, base=1000)

def run_fio(fio, bs, bw, write, offset_increment=0, rebuild=False,
            md_inst=None):
    res = {"blocksize" : bs}

    rw = "write" if write else "read"

    if rebuild and md_inst:
        md_inst.degrade(md_inst.devs[0])
        md_inst.recover(md_inst.devs[0])

    try:
        if bw:
            fio_res = fio.run(blocksize=bs, readwrite=rw,
                              offset_increment=offset_increment)
            job_res = fio_res["result"]["jobs"][0][rw]

            name = f"Seq {rw.capitalize()}"
            res[f"{name} BW"] = {"suffix" : bw_suffix(job_res["bw"]),
                                 "raw"    : job_res["bw"]
            }
        else:
            fio_res = fio.run(blocksize=bs, readwrite=f"rand{rw}",
                              offset_increment=offset_increment)
            job_res = fio_res["result"]["jobs"][0][rw]

            name = f"Rnd {rw.capitalize()}"
            res[f"{name} IOPS"] = {"suffix" : iops_suffix(job_res["iops"]),
                                   "raw"    : job_res["iops"],
            }
    except Exception as e:
        sys.exit(e)

    if 'cpu' in fio_res:
        res[f"CPU User"] = f"{fio_res['cpu'].user}%"
        res[f"CPU System"] = f"{fio_res['cpu'].system}%"

    return res

def add_peak(results, peaks, bs, key):
    results_bs = filter(lambda x: x['blocksize'] == bs, results)
    peak = max(results_bs, key=lambda x: x[key]["raw"])

    io_type = key.replace('BW', '').replace('IOPS', '').strip()

    peaks.setdefault(key, {})
    peaks[key][bs] = {'Value'      : peak[key]['suffix'],
                      'chunk_size' : peak['chunk_size'],
                      'thread_cnt' : peak['thread_cnt'],
                      'cache_size' : peak['cache_size'],
                     }
    if 'CPU User' in peak:
        peaks[key][bs].update({'CPU User'   : peak['CPU User'],
                               'CPU System' : peak[f'CPU System'],
                              })

def pretty_print(results, title):
    headers = list(list(results.values())[0][0].keys())
    columns = [[list(v2.values()) for v2 in v1] for k1,v1 in results.items()]
    columns = list(itertools.chain(*columns))
    columns = [[x if type(x) is not dict else x['suffix'] for x in c] for c in columns]
    print(title)
    print(tabulate.tabulate(columns, headers=headers))
    print()

if __name__ == "__main__":
    md_parser = md.MDArgumentParser(conflict_handler="resolve")
    md_parser.md_grp.add_argument("-c", "--chunk-size", default=[64 << 10],
                                  nargs="+",
                                  type=md.MDArgumentParser._suffix_parse,
                                  help="md chunk size")
    md_parser.md_grp.add_argument("--thread-cnt", default=[4], type=int,
                                  nargs="+",
                                  help="group thread count for array")
    md_parser.md_grp.add_argument("--cache-size", default=[8192], type=int,
                                  nargs="+", help="cache size")
    grp = md_parser.add_argument_group("perf test arguments")
    grp.add_argument("--output", "-o", choices=["pretty", "json"],
                     default="pretty", help="Output format.")
    grp.add_argument("--write", "-w", action="store_true",
                     help="Test write.")
    grp.add_argument("--read", "-r", action="store_true", help="Test read.")
    grp.add_argument("--bandwidth", "--bw", nargs='+', default=[], metavar='BS',
                     help="Blocksizes to test for sequential bandwidth.")
    grp.add_argument("--iops", nargs='+', default=[], metavar='BS',
                     help="Blocksizes to test for random IOPS.")
    grp.add_argument("--cpu", action="store_true",
                     help="Measure CPU utilization.")
    grp.add_argument("--runtime", "-t", default="15s", help="fio runtime.")
    grp.add_argument("--ramptime", default=0, help="fio ramptime.")
    grp.add_argument("--fio-size", default=4<<30, type=md_parser._suffix_parse,
                     help="fio size")
    grp.add_argument("--rebuild", action="store_true",
                     help="measure performance during rebuild.")

    args = md_parser.parse_args()

    if os.getuid() != 0:
        sys.exit("This script must be executed as root.")

    if not args.write and not args.read:
        args.write = True

    if args.bandwidth + args.iops == []:
        args.bandwidth = ['1M']

    md_options = itertools.product(args.chunk_size, args.thread_cnt,
                                   args.cache_size)

    done = 0.0
    step = 100.0 / (len(args.chunk_size) * len(args.thread_cnt) *
                    len(args.cache_size) * len(args.bandwidth + args.iops))
    if args.write and args.read:
        step /= 2

    results = {x : {
                    io : {} for io in ["write", "read"]
                   } for x in ['BW', 'IOPS']
              }
    inst = md.MDInstance.create_from_parsed_args(args)
    fio = FIO(inst.md_dev, cpu=args.cpu, runtime=args.runtime,
              ramp_time=args.ramptime, size=args.fio_size)

    for chunk_size, thread_cnt, cache_size in md_options:
            inst.chunk_size = chunk_size
            inst.thread_cnt = thread_cnt
            inst.cache_size = cache_size
            inst.setup(wait=False)

            if args.level == 5:
                stripe_size = chunk_size * (args.disks - 1)
            elif args.level == 6:
                stripe_size = chunk_size * (args.disks - 2)
            else:
                stripe_size = 0

            if stripe_size:
                offset_increment = ((args.fio_size + stripe_size - 1)
                                    // stripe_size
                                    * stripe_size)
            else:
                offset_increment = args.fio_size

            for bs in args.bandwidth:
                if args.write:
                    print(f"{done:.1f}%", end="\r")
                    res = run_fio(fio, bs=bs, bw=True, write=True,
                                  offset_increment=offset_increment,
                                  rebuild=args.rebuild, md_inst=inst)
                    res.update(dict(chunk_size=chunk_size,
                                    thread_cnt=thread_cnt,
                                    cache_size=cache_size))
                    results['BW']['write'].setdefault(bs, [])
                    results['BW']['write'][bs].append(res)
                    done += step

                    if args.rebuild:
                        inst.setup(wait=False)

                if args.read:
                    print(f"{done:.1f}%", end="\r")
                    res = run_fio(fio, bs=bs, bw=True, write=False,
                                  offset_increment=offset_increment,
                                  rebuild=args.rebuild, md_inst=inst)
                    res.update(dict(chunk_size=chunk_size,
                                    thread_cnt=thread_cnt,
                                    cache_size=cache_size))
                    results['BW']['read'].setdefault(bs, [])
                    results['BW']['read'][bs].append(res)
                    done += step

                    if args.rebuild:
                        inst.setup(wait=False)

            for bs in args.iops:
                if args.write:
                    print(f"{done:.1f}%", end="\r")
                    res = run_fio(fio, bs=bs, bw=False, write=True,
                                  offset_increment=offset_increment,
                                  rebuild=args.rebuild, md_inst=inst)
                    res.update(dict(chunk_size=chunk_size,
                                    thread_cnt=thread_cnt,
                                    cache_size=cache_size))
                    results['IOPS']['write'].setdefault(bs, [])
                    results['IOPS']['write'][bs].append(res)
                    done += step

                    if args.rebuild:
                        inst.setup(wait=False)

                if args.read:
                    print(f"{done:.1f}%", end="\r")
                    res = run_fio(fio, bs=bs, bw=False, write=False,
                                  offset_increment=offset_increment,
                                  rebuild=args.rebuild, md_inst=inst)
                    res.update(dict(chunk_size=chunk_size,
                                    thread_cnt=thread_cnt,
                                    cache_size=cache_size))
                    results['IOPS']['read'].setdefault(bs, [])
                    results['IOPS']['read'][bs].append(res)
                    done += step

                    if args.rebuild:
                        inst.setup(wait=False)

    peaks = {}
    for bs in args.bandwidth:
        if args.write:
            add_peak(results['BW']['write'][bs], peaks, bs, 'Seq Write BW')
        if args.read:
            add_peak(results['BW']['read'][bs], peaks, bs, 'Seq Read BW')
    for bs in args.iops:
        if args.write:
            add_peak(results['IOPS']['write'][bs], peaks, bs, 'Rnd Write IOPS')
        if args.read:
            add_peak(results['IOPS']['read'][bs], peaks, bs, 'Rnd Read IOPS')

    if args.output == "pretty":
        subtitle = f'(disks:{args.disks}, level:{args.level}, cores:{os.cpu_count()}, rebuild:{args.rebuild})'
        if args.bandwidth:
            if args.write:
                pretty_print(results['BW']['write'], f'Seq Write BW {subtitle}')
            if args.read:
                pretty_print(results['BW']['read'], f'Seq Read BW {subtitle}')
        if args.iops:
            if args.write:
                pretty_print(results['IOPS']['write'],
                             f'Rnd Write IOPS {subtitle}')
            if args.read:
                pretty_print(results['IOPS']['read'],
                             f'Rnd Read IOPS {subtitle}')

        print(f'Best configurations {subtitle}')
        headers = ['Metric', 'blocksize']
        headers += list(list(peaks.values())[0].values())[0].keys()
        peaks = [[[k1, k2] + list(v2.values()) for k2, v2 in v1.items()]
                for k1, v1 in peaks.items()]
        peaks = list(itertools.chain(*peaks))
        print(tabulate.tabulate(peaks, headers=headers))
    else:
        results = {
            'args' : vars(args),
            'all' : results,
            'peaks' : peaks,
        }
        print(json.dumps(results, indent=4))
